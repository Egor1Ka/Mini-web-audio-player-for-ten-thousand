{"ast":null,"code":"class AudioDriver {\n  constructor(audioFile) {\n    this.audioFile = void 0;\n    this.audioContext = void 0;\n    this.audioBuffer = undefined;\n    this.gainNode = undefined;\n    this.bufferSource = undefined;\n    this.startedAt = 0;\n    this.pausedAt = 0;\n    this.isRunning = false;\n    this.volume = 1;\n    this.audioFile = audioFile; // Sound data\n\n    this.audioContext = new AudioContext(); // AudioContext provides us access for hardware speakers\n  }\n\n  async init() {\n    this.audioBuffer = await this.audioContext.decodeAudioData(this.audioFile);\n  }\n\n  getDuretion() {\n    var _this$audioBuffer;\n\n    return (_this$audioBuffer = this.audioBuffer) === null || _this$audioBuffer === void 0 ? void 0 : _this$audioBuffer.duration;\n  }\n\n  async play() {\n    if (!this.audioBuffer) {\n      throw new Error('Play error. Audio buffer is not exists. Try to call \"init\" method before Play.');\n    }\n\n    if (this.isRunning) {\n      return;\n    }\n\n    this.gainNode = this.audioContext.createGain(); // create a volume controller\n\n    this.bufferSource = this.audioContext.createBufferSource(); // create buffer source which allows us to play a sound\n\n    this.bufferSource.buffer = this.audioBuffer; // add AudioBuffer (sound data) to buffer source\n\n    this.bufferSource.connect(this.gainNode); // connecting volume controller to buffer source\n\n    this.bufferSource.connect(this.audioContext.destination); // connect buffer source to hardware speakers\n\n    this.gainNode.connect(this.audioContext.destination); // connect volume controller to hardware speakers\n\n    await this.audioContext.resume(); // resume all speakers\n\n    this.bufferSource.start(0, this.pausedAt); // run the sound. pausedAt remembers a last pause time\n\n    this.gainNode.gain.value = this.volume; // setup default volume\n\n    this.startedAt = this.audioContext.currentTime - this.pausedAt; // remember the time when we run the sound\n\n    this.pausedAt = 0;\n    this.isRunning = true;\n    console.log(this.gainNode);\n    console.log(this.audioContext.currentTime, 'audio Context');\n  }\n\n  async pause(reset) {\n    var _this$gainNode;\n\n    if (!this.bufferSource) {\n      return;\n    }\n\n    await this.audioContext.suspend(); // stop using hardware speakers\n\n    this.pausedAt = reset ? 0 : this.audioContext.currentTime - this.startedAt; // calculate pause time or reset to 0\n\n    this.bufferSource.stop(this.pausedAt); // stop playing sound\n\n    (_this$gainNode = this.gainNode) === null || _this$gainNode === void 0 ? void 0 : _this$gainNode.disconnect(); // disconnect volume controller\n\n    this.bufferSource.disconnect(); // remove buffer source from hardware speakers. We can't reuse the same buffer source, always should be new one.\n\n    this.isRunning = false;\n  }\n\n  changeVolume(volume) {\n    this.volume = volume;\n\n    if (this.gainNode) {\n      this.gainNode.gain.value = volume;\n    }\n  }\n\n  ChengeSoubndTime(value) {\n    const play = async value => {\n      if (!this.audioBuffer) {\n        throw new Error('Play error. Audio buffer is not exists. Try to call \"init\" method before Play.');\n      }\n\n      if (this.isRunning) {\n        return;\n      }\n\n      this.gainNode = this.audioContext.createGain(); // create a volume controller\n\n      this.bufferSource = this.audioContext.createBufferSource(); // create buffer source which allows us to play a sound\n\n      this.bufferSource.buffer = this.audioBuffer; // add AudioBuffer (sound data) to buffer source\n\n      this.bufferSource.connect(this.gainNode); // connecting volume controller to buffer source\n\n      this.bufferSource.connect(this.audioContext.destination); // connect buffer source to hardware speakers\n\n      this.gainNode.connect(this.audioContext.destination); // connect volume controller to hardware speakers\n\n      await this.audioContext.resume(); // resume all speakers\n\n      this.bufferSource.start(0, this.pausedAt); // run the sound. pausedAt remembers a last pause time\n\n      this.gainNode.gain.value = this.volume; // setup default volume\n\n      this.startedAt = this.audioContext.currentTime - this.pausedAt; // remember the time when we run the sound\n\n      this.pausedAt = 0;\n      this.isRunning = true;\n      console.log(this.gainNode);\n      console.log(this.audioContext.currentTime, 'audio Context');\n    };\n\n    this.pause();\n    play(value);\n  }\n\n}\n\nexport default AudioDriver;","map":{"version":3,"names":["AudioDriver","constructor","audioFile","audioContext","audioBuffer","undefined","gainNode","bufferSource","startedAt","pausedAt","isRunning","volume","AudioContext","init","decodeAudioData","getDuretion","duration","play","Error","createGain","createBufferSource","buffer","connect","destination","resume","start","gain","value","currentTime","console","log","pause","reset","suspend","stop","disconnect","changeVolume","ChengeSoubndTime"],"sources":["C:/Users/Егор/Desktop/player/src/components/audioPlayer/drive.ts"],"sourcesContent":["class AudioDriver {\n  private readonly audioFile;\n\n  private audioContext: AudioContext;\n  private audioBuffer?: AudioBuffer = undefined;\n  private gainNode?: GainNode = undefined;\n\n  private bufferSource?: AudioBufferSourceNode = undefined;\n\n  private startedAt = 0;\n  private pausedAt = 0;\n  private isRunning = false;\n\n  private volume = 1;\n\n  constructor(audioFile: ArrayBuffer) {\n    this.audioFile = audioFile; // Sound data\n    this.audioContext = new AudioContext(); // AudioContext provides us access for hardware speakers\n  }\n\n  async init() {\n    this.audioBuffer = await this.audioContext.decodeAudioData(this.audioFile);\n  }\n\n  public getDuretion(){\n    return this.audioBuffer?.duration\n  }\n\n  public async play() {\n    if (!this.audioBuffer) {\n      throw new Error(\n        'Play error. Audio buffer is not exists. Try to call \"init\" method before Play.'\n      );\n    }\n\n    if (this.isRunning) {\n      return;\n    }\n\n    this.gainNode = this.audioContext.createGain(); // create a volume controller\n\n    this.bufferSource = this.audioContext.createBufferSource(); // create buffer source which allows us to play a sound\n    this.bufferSource.buffer = this.audioBuffer; // add AudioBuffer (sound data) to buffer source\n\n    this.bufferSource.connect(this.gainNode); // connecting volume controller to buffer source\n    this.bufferSource.connect(this.audioContext.destination); // connect buffer source to hardware speakers\n\n    this.gainNode.connect(this.audioContext.destination); // connect volume controller to hardware speakers\n\n    await this.audioContext.resume(); // resume all speakers\n\n    this.bufferSource.start(0, this.pausedAt); // run the sound. pausedAt remembers a last pause time\n\n    this.gainNode.gain.value = this.volume; // setup default volume\n\n    this.startedAt = this.audioContext.currentTime - this.pausedAt; // remember the time when we run the sound\n    this.pausedAt = 0;\n\n    this.isRunning = true;\n\n    console.log(this.gainNode)\n    console.log(this.audioContext.currentTime,'audio Context')\n  }\n\n  async pause(reset?: boolean) {\n    if (!this.bufferSource) {\n      return;\n    }\n\n    await this.audioContext.suspend(); // stop using hardware speakers\n\n    this.pausedAt = reset ? 0 : this.audioContext.currentTime - this.startedAt; // calculate pause time or reset to 0\n    this.bufferSource.stop(this.pausedAt); // stop playing sound\n    this.gainNode?.disconnect(); // disconnect volume controller\n    this.bufferSource.disconnect(); // remove buffer source from hardware speakers. We can't reuse the same buffer source, always should be new one.\n    this.isRunning = false;\n  }\n\n  public changeVolume(volume: number) {\n    this.volume = volume;\n\n    if (this.gainNode) {\n      this.gainNode.gain.value = volume;\n    }\n  }\n\n  public ChengeSoubndTime(value:number){\n    const play = async (value:number)=>{\n      if (!this.audioBuffer) {\n        throw new Error(\n          'Play error. Audio buffer is not exists. Try to call \"init\" method before Play.'\n        );\n      }\n  \n      if (this.isRunning) {\n        return;\n      }\n  \n      this.gainNode = this.audioContext.createGain(); // create a volume controller\n  \n      this.bufferSource = this.audioContext.createBufferSource(); // create buffer source which allows us to play a sound\n      this.bufferSource.buffer = this.audioBuffer; // add AudioBuffer (sound data) to buffer source\n  \n      this.bufferSource.connect(this.gainNode); // connecting volume controller to buffer source\n      this.bufferSource.connect(this.audioContext.destination); // connect buffer source to hardware speakers\n  \n      this.gainNode.connect(this.audioContext.destination); // connect volume controller to hardware speakers\n  \n      await this.audioContext.resume(); // resume all speakers\n  \n      this.bufferSource.start(0, this.pausedAt); // run the sound. pausedAt remembers a last pause time\n  \n      this.gainNode.gain.value = this.volume; // setup default volume\n  \n      this.startedAt = this.audioContext.currentTime - this.pausedAt; // remember the time when we run the sound\n      this.pausedAt = 0;\n  \n      this.isRunning = true;\n  \n      console.log(this.gainNode)\n      console.log(this.audioContext.currentTime,'audio Context')\n    }\n  \n    this.pause()\n    play(value)\n  } \n}\n\nexport default AudioDriver;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}